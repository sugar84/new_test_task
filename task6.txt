Сначала резолвится адрес reg.ru в ip-адрес. Либо на основании локальных записей, например /etc/hosts/, либо на оснвании DNS, в последнем случае идёт запрос на DNS-сервер, указанный на локальной машине, например провадеровский либо гугловский 8.8.8.8, как правило запрос посылается через UDP.
После разрешения доменного имени в IP веб-браузер открывает tcp-соединение к вебсерверу. Далее через это соединение браузер посылает http-запрос, в данном случае это GET, запрос будет вида примерно такого:
GET / HTTP/1.1
Host: www.reg.ru
Header1: "..."
Header2: "..."
...
Сначала заголовки, потом тело запроса, но так как в нашем запросе тело не предусмотрено (у нас гет-запрос, плюс content-lentgth или будет отсутствовать, или будет равен нулю), то тела запроса не будет, в конце блока заголовков идёт два переноса строки, что сервер расценивает как окончание запроса, и начинает формировать ответ следуя какой-то своей внутренней логике и на основаниия информации из запроса (путь, заголовки запроса и т.д.). Затем он отправляет сформированный ответ назад браузеру в рамках того же tcp-соединения. В ответе так же заголовки отделены от тела сообщения двумя переносами строки. Далее уже браузер но основаниия заголовков вычитывает тело запроса и пытается как-то его показать (по дефолту html, если не указан какой-то другой content-type), у нас тип данных html, поэтому будет показан html. Дальше уже, на основании тегов и атрибутов итогого html, а так же адднов и настроек самого веб-клиента, браузер пытается подкчать стили (css) и javascript, делая http-запросы на веб-сервер. Затем подкчаннаые стили и джаваскрипты интерпертируются и применяются к выведенному html. Как правило веб-приложениях стараются делать так, чтобы стили подкачивались и применелись до или во время загрузки html-кода, и вообще чтобы они были уже закэшированы.